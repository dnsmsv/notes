{"version":3,"sources":["components/Navbar.js","context/alert/alertContext.js","components/Alert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlertState.js","context/firebase/firebaseContext.js","components/Form.js","components/Notes.js","components/Loader.js","pages/Home.js","pages/About.js","context/firebase/firebaseReducer.js","context/firebase/FirebaseState.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","exact","AlertContext","createContext","Alert","useContext","alert","hide","visible","type","text","onClick","aria-label","aria-hidden","handlers","_","payload","state","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","value","show","FirebaseContext","Form","useState","setValue","firebase","onSubmit","event","preventDefault","trim","addNote","then","catch","err","message","placeholder","onChange","e","target","Notes","notes","onRemove","length","TransitionGroup","component","map","note","CSSTransition","key","id","timeout","classNames","title","Date","date","toLocaleDateString","remove","Loader","role","Home","loading","fetchNotes","removeNote","useEffect","About","filter","firebaseReducer","url","process","FirebaseState","showLoader","a","axios","get","res","data","Object","keys","toJSON","post","name","Error","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.b6259422.chunk.js","sourcesContent":["import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nexport const Navbar = () => (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"navbar-brand\">\r\n            Notes\r\n        </div>\r\n\r\n        <ul className=\"nav navbar-nav\">\r\n            <li className=\"nav-item\">\r\n                <NavLink \r\n                    className=\"nav-link\"\r\n                    to=\"/notes/\"\r\n                    exact\r\n                >\r\n                    Home\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <NavLink \r\n                    className=\"nav-link\"\r\n                    to=\"/notes/about\"\r\n                >\r\n                    About\r\n                </NavLink>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n)","import {createContext} from 'react'\r\n\r\nexport const AlertContext = createContext()","import React, {useContext} from 'react'\r\nimport {AlertContext} from '../context/alert/alertContext'\r\n\r\nexport const Alert = () => {\r\n    const {alert, hide} = useContext(AlertContext)\r\n\r\n    if (!alert.visible) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={`alert alert-${alert.type || 'warning'} alert-dismissible`}>\r\n            <strong>Attention!</strong>\r\n            &nbsp;{alert.text}\r\n            <button onClick={hide} type=\"button\" className=\"close\" aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n        </div>\r\n    );\r\n}","import { SHOW_ALERT, HIDE_ALERT } from \"../types\"\r\n\r\nconst handlers = {\r\n    [SHOW_ALERT]: (_, {payload}) => ({...payload, visible: true}),\r\n    [HIDE_ALERT]: state => ({...state, visible: false}),\r\n    DEFAULT: state => state\r\n}\r\n\r\nexport const alertReducer = (state, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT\r\n    return handle(state, action)\r\n}","export const SHOW_ALERT = 'SHOW_ALERT'\r\nexport const HIDE_ALERT = 'HIDE_ALERT'\r\nexport const SHOW_LOADER = 'SHOW_LOADER'\r\nexport const ADD_NOTE = 'ADD_NOTE'\r\nexport const FETCH_NOTES = 'FETCH_NOTES'\r\nexport const REMOVE_NOTE = 'REMOVE_NOTE'\r\n","import React, {useReducer} from 'react'\r\nimport {AlertContext} from './alertContext'\r\nimport { HIDE_ALERT, SHOW_ALERT } from '../types'\r\nimport {alertReducer} from './alertReducer'\r\n\r\nexport const AlertState = ({children}) => {\r\n    const [state, dispatch] = useReducer(alertReducer, {visible: false})\r\n\r\n    const show = (text, type = 'warning') => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: {text, type}\r\n        })\r\n    }\r\n\r\n    const hide = () => dispatch({type: HIDE_ALERT})\r\n\r\n    return (\r\n        <AlertContext.Provider value={{\r\n            show, hide, \r\n            alert: state\r\n        }}>\r\n            {children}\r\n        </AlertContext.Provider>\r\n    )\r\n}","import {createContext} from 'react'\r\n\r\nexport const FirebaseContext = createContext()","import React, {useState, useContext} from 'react'\r\nimport {AlertContext} from '../context/alert/alertContext'\r\nimport {FirebaseContext} from \"../context/firebase/firebaseContext\";\r\n\r\nexport const Form = () => {\r\n    const [value, setValue] = useState('')\r\n    const alert = useContext(AlertContext)\r\n    const firebase = useContext(FirebaseContext)\r\n\r\n    const submitHandler = event => {\r\n        event.preventDefault()\r\n\r\n        if (value.trim()) {\r\n            firebase.addNote(value.trim()).then(() => {\r\n                alert.show('Note was created', 'success')\r\n            }).catch(err => {\r\n                alert.show(err.message, 'danger')\r\n            })\r\n            setValue('')\r\n        } else {\r\n            alert.show('Input note')\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className=\"form-group\">\r\n                <input \r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Input note name\"\r\n                    value={value}\r\n                    onChange={e => setValue(e.target.value)}\r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React, {useContext} from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport {AlertContext} from \"../context/alert/alertContext\";\r\n\r\nexport const Notes = ({notes, onRemove}) => {\r\n    const alert = useContext(AlertContext)\r\n\r\n    const remove = note => {\r\n        onRemove(note.id).then(() => {\r\n            alert.show('Note was removed', 'success')\r\n        })\r\n    }\r\n\r\n    if (!notes || !notes.length) {\r\n        return (<p>There is no notes yet</p>)\r\n    }\r\n\r\n    return (\r\n        <TransitionGroup component=\"ul\" className=\"list-group\">\r\n            {notes.map(note => (\r\n                <CSSTransition\r\n                    key={note.id}\r\n                    timeout={800}\r\n                    classNames=\"note\"\r\n                >\r\n                    <li className=\"list-group-item note\">\r\n                        <div>\r\n                            <strong>{note.title}</strong>\r\n                            <small>{new Date(note.date).toLocaleDateString()}</small>\r\n                        </div>\r\n\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-outline-danger btn-sm\"\r\n                            onClick={() => remove(note)}\r\n                        >\r\n                            &times;\r\n                        </button>\r\n                    </li>\r\n                </CSSTransition>\r\n            ))}\r\n        </TransitionGroup>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Loader = () => (\r\n    <div className=\"text-center\">\r\n        <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </div>\r\n)","import React, {Fragment, useContext, useEffect} from 'react'\r\nimport {Form} from '../components/Form'\r\nimport {Notes} from '../components/Notes'\r\nimport {FirebaseContext} from \"../context/firebase/firebaseContext\";\r\nimport {Loader} from \"../components/Loader\";\r\n\r\nexport const Home = () => {\r\n    const {loading, notes, fetchNotes, removeNote} = useContext(FirebaseContext)\r\n\r\n    useEffect(() => {\r\n        fetchNotes()\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    return (\r\n        <Fragment>\r\n            <Form />\r\n\r\n            <hr />\r\n\r\n            {loading\r\n                ? <Loader/>\r\n                : <Notes notes={notes} onRemove={removeNote}/>\r\n            }\r\n        </Fragment>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const About = () => (\r\n  <div className=\"jumbotron jumbotron-fluid\">\r\n    <div className=\"container\">\r\n      <h1 className=\"display-4\">Notes</h1>\r\n      <p className=\"lead\">\r\n        Application for write down and remove notes.\r\n      </p>\r\n    </div>\r\n  </div>\r\n);","import {ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER} from \"../types\";\r\n\r\nconst handlers = {\r\n    [SHOW_LOADER]: state => ({...state, loading: true}),\r\n    [ADD_NOTE]: (state, {payload}) => ({\r\n        ...state,\r\n        notes: [...state.notes, payload]\r\n    }),\r\n    [FETCH_NOTES]: (state, {payload}) => ({...state, notes: payload, loading: false}),\r\n    [REMOVE_NOTE]: (state, {payload}) => ({\r\n        ...state,\r\n        notes: state.notes.filter(note => note.id !== payload)\r\n    }),\r\n    DEFAULT: state => state\r\n}\r\n\r\nexport const firebaseReducer = (state, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT\r\n    return handle(state, action)\r\n}","import React, {useReducer} from \"react\";\r\nimport axios from 'axios'\r\nimport {FirebaseContext} from \"./firebaseContext\";\r\nimport {firebaseReducer} from \"./firebaseReducer\";\r\nimport {ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER} from \"../types\";\r\n\r\nconst url = process.env.REACT_APP_DB_URL\r\n\r\nexport const FirebaseState = ({children}) => {\r\n    const initialState = {\r\n        notes: [],\r\n        loading: false\r\n    }\r\n    const [state, dispatch] = useReducer(firebaseReducer, initialState)\r\n\r\n    const showLoader = () => dispatch({type: SHOW_LOADER})\r\n\r\n    const fetchNotes = async () => {\r\n        showLoader()\r\n        const res = await axios.get(`${url}/notes.json`)\r\n        const payload =\r\n            res.data\r\n                ? Object.keys(res.data).map(key => {\r\n                    return {\r\n                        ...res.data[key],\r\n                        id: key\r\n                    }})\r\n                : {}\r\n\r\n        dispatch({type: FETCH_NOTES, payload})\r\n    }\r\n\r\n    const addNote = async title => {\r\n        const note = {\r\n            title, date: new Date().toJSON()\r\n        }\r\n        \r\n        try {\r\n            const res = await axios.post(`${url}/notes.json`, note)\r\n            const payload = {\r\n                ...note,\r\n                id: res.data.name\r\n            }\r\n            dispatch({\r\n                type: ADD_NOTE,\r\n                payload\r\n            })\r\n        } catch (e) {\r\n            throw new Error(e.message)\r\n        }\r\n    }\r\n\r\n    const removeNote = async id => {\r\n        await axios.delete(`${url}/notes/${id}.json`)\r\n        dispatch({type: REMOVE_NOTE, payload: id })\r\n    }\r\n\r\n    return (\r\n        <FirebaseContext.Provider value={{\r\n            showLoader, addNote, removeNote, fetchNotes,\r\n            loading: state.loading,\r\n            notes: state.notes\r\n        }}>\r\n            {children}\r\n        </FirebaseContext.Provider>\r\n    )\r\n}","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport {Navbar} from './components/Navbar'\nimport {Alert} from './components/Alert'\nimport {AlertState} from './context/alert/AlertState'\nimport {Home} from './pages/Home'\nimport {About} from './pages/About'\nimport {FirebaseState} from \"./context/firebase/FirebaseState\";\n\nfunction App() {\n  return (\n      <FirebaseState>\n        <AlertState>\n          <BrowserRouter>\n            <Navbar />\n            <div className=\"container pt-4\">\n              <Alert />\n              <Switch>\n                <Route path={'/notes/'} exact component={Home} />\n                <Route path={'/notes/about'} exact component={About} />\n              </Switch>\n            </div>\n          </BrowserRouter>\n        </AlertState>\n      </FirebaseState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}