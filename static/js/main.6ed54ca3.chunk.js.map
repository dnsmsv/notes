{"version":3,"sources":["components/Navbar.js","context/alert/alertContext.js","components/Alert.js","context/types.js","context/alert/alertReducer.js","context/alert/AlertState.js","context/firebase/firebaseContext.js","components/Form.js","components/Notes.js","components/Loader.js","pages/Home.js","pages/About.js","context/firebase/firebaseReducer.js","context/firebase/FirebaseState.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","exact","AlertContext","createContext","Alert","useContext","alert","hide","visible","type","text","onClick","aria-label","aria-hidden","SHOW_ALERT","HIDE_ALERT","SHOW_LOADER","ADD_NOTE","FETCH_NOTES","REMOVE_NOTE","handlers","_","payload","state","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","value","show","FirebaseContext","Form","useState","setValue","firebase","onSubmit","event","preventDefault","trim","addNote","then","catch","err","message","placeholder","onChange","e","target","Notes","notes","onRemove","length","TransitionGroup","component","map","note","CSSTransition","key","id","timeout","classNames","title","Date","date","toLocaleDateString","remove","Loader","role","Home","loading","fetchNotes","removeNote","useEffect","About","filter","firebaseReducer","url","process","FirebaseState","showLoader","a","axios","get","res","data","Object","keys","toJSON","post","name","Error","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.6ed54ca3.chunk.js","sourcesContent":["import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nexport const Navbar = () => (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"navbar-brand\">\r\n            Notes\r\n        </div>\r\n\r\n        <ul className=\"nav navbar-nav\">\r\n            <li className=\"nav-item\">\r\n                <NavLink \r\n                    className=\"nav-link\"\r\n                    to=\"/notes/\"\r\n                    exact\r\n                >\r\n                    Home\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <NavLink \r\n                    className=\"nav-link\"\r\n                    to=\"/notes/about\"\r\n                >\r\n                    About\r\n                </NavLink>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n)","import {createContext} from 'react'\r\n\r\nexport const AlertContext = createContext()","import React, {useContext} from 'react'\r\nimport {AlertContext} from '../context/alert/alertContext'\r\n\r\nexport const Alert = () => {\r\n    const {alert, hide} = useContext(AlertContext)\r\n\r\n    if (!alert.visible) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={`alert alert-${alert.type || 'warning'} alert-dismissible`}>\r\n            <strong>Attention!</strong>\r\n            &nbsp;{alert.text}\r\n            <button onClick={hide} type=\"button\" className=\"close\" aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n        </div>\r\n    );\r\n}","export const SHOW_ALERT = 'SHOW_ALERT'\r\nexport const HIDE_ALERT = 'HIDE_ALERT'\r\nexport const SHOW_LOADER = 'SHOW_LOADER'\r\nexport const ADD_NOTE = 'ADD_NOTE'\r\nexport const FETCH_NOTES = 'FETCH_NOTES'\r\nexport const REMOVE_NOTE = 'REMOVE_NOTE'\r\n","import { SHOW_ALERT, HIDE_ALERT } from \"../types\"\r\n\r\nconst handlers = {\r\n    [SHOW_ALERT]: (_, {payload}) => ({...payload, visible: true}),\r\n    [HIDE_ALERT]: state => ({...state, visible: false}),\r\n    DEFAULT: state => state\r\n}\r\n\r\nexport const alertReducer = (state, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT\r\n    return handle(state, action)\r\n}","import React, {useReducer} from 'react'\r\nimport {AlertContext} from './alertContext'\r\nimport { HIDE_ALERT, SHOW_ALERT } from '../types'\r\nimport {alertReducer} from './alertReducer'\r\n\r\nexport const AlertState = ({children}) => {\r\n    const [state, dispatch] = useReducer(alertReducer, {visible: false})\r\n\r\n    const show = (text, type = 'warning') => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: {text, type}\r\n        })\r\n    }\r\n\r\n    const hide = () => dispatch({type: HIDE_ALERT})\r\n\r\n    return (\r\n        <AlertContext.Provider value={{\r\n            show, hide, \r\n            alert: state\r\n        }}>\r\n            {children}\r\n        </AlertContext.Provider>\r\n    )\r\n}","import {createContext} from 'react'\r\n\r\nexport const FirebaseContext = createContext()","import React, {useState, useContext} from 'react'\r\nimport {AlertContext} from '../context/alert/alertContext'\r\nimport {FirebaseContext} from \"../context/firebase/firebaseContext\";\r\n\r\nexport const Form = () => {\r\n    const [value, setValue] = useState('')\r\n    const alert = useContext(AlertContext)\r\n    const firebase = useContext(FirebaseContext)\r\n\r\n    const submitHandler = event => {\r\n        event.preventDefault()\r\n\r\n        if (value.trim()) {\r\n            firebase.addNote(value.trim()).then(() => {\r\n                alert.show('Note was created', 'success')\r\n            }).catch(err => {\r\n                alert.show(err.message, 'danger')\r\n            })\r\n            setValue('')\r\n        } else {\r\n            alert.show('Input note')\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className=\"form-group\">\r\n                <input \r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Input note name\"\r\n                    value={value}\r\n                    onChange={e => setValue(e.target.value)}\r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React, {useContext} from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport {AlertContext} from \"../context/alert/alertContext\";\r\n\r\nexport const Notes = ({notes, onRemove}) => {\r\n    const alert = useContext(AlertContext)\r\n\r\n    const remove = note => {\r\n        onRemove(note.id).then(() => {\r\n            alert.show('Note was removed', 'success')\r\n        })\r\n    }\r\n\r\n    if (!notes || !notes.length) {\r\n        return (<p>There is no notes yet</p>)\r\n    }\r\n\r\n    return (\r\n        <TransitionGroup component=\"ul\" className=\"list-group\">\r\n            {notes.map(note => (\r\n                <CSSTransition\r\n                    key={note.id}\r\n                    timeout={800}\r\n                    classNames=\"note\"\r\n                >\r\n                    <li className=\"list-group-item note\">\r\n                        <div>\r\n                            <strong>{note.title}</strong>\r\n                            <small>{new Date(note.date).toLocaleDateString()}</small>\r\n                        </div>\r\n\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-outline-danger btn-sm\"\r\n                            onClick={() => remove(note)}\r\n                        >\r\n                            &times;\r\n                        </button>\r\n                    </li>\r\n                </CSSTransition>\r\n            ))}\r\n        </TransitionGroup>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Loader = () => (\r\n    <div className=\"text-center\">\r\n        <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </div>\r\n)","import React, {Fragment, useContext, useEffect} from 'react'\r\nimport {Form} from '../components/Form'\r\nimport {Notes} from '../components/Notes'\r\nimport {FirebaseContext} from \"../context/firebase/firebaseContext\";\r\nimport {Loader} from \"../components/Loader\";\r\n\r\nexport const Home = () => {\r\n    const {loading, notes, fetchNotes, removeNote} = useContext(FirebaseContext)\r\n\r\n    useEffect(() => {\r\n        fetchNotes()\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    return (\r\n        <Fragment>\r\n            <Form />\r\n\r\n            <hr />\r\n\r\n            {loading\r\n                ? <Loader/>\r\n                : <Notes notes={notes} onRemove={removeNote}/>\r\n            }\r\n        </Fragment>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const About = () => (\r\n  <div className=\"jumbotron jumbotron-fluid\">\r\n    <div className=\"container\">\r\n      <h1 className=\"display-4\">Notes</h1>\r\n      <p className=\"lead\">\r\n        Application for write down and remove notes.\r\n      </p>\r\n    </div>\r\n  </div>\r\n);","import {\r\n  ADD_NOTE,\r\n  FETCH_NOTES,\r\n  REMOVE_NOTE,\r\n  SHOW_LOADER,\r\n} from '../types';\r\n\r\nconst handlers = {\r\n  [SHOW_LOADER]: (state) => ({ ...state, loading: true }),\r\n  [ADD_NOTE]: (state, { payload }) => ({\r\n    ...state,\r\n    notes: state.notes?.length\r\n      ? [...state.notes, payload]\r\n      : [payload],\r\n  }),\r\n  [FETCH_NOTES]: (state, { payload }) => ({\r\n    ...state,\r\n    notes: payload,\r\n    loading: false,\r\n  }),\r\n  [REMOVE_NOTE]: (state, { payload }) => ({\r\n    ...state,\r\n    notes: state.notes.filter(\r\n      (note) => note.id !== payload\r\n    ),\r\n  }),\r\n  DEFAULT: (state) => state,\r\n};\r\n\r\nexport const firebaseReducer = (state, action) => {\r\n  const handle = handlers[action.type] || handlers.DEFAULT;\r\n  return handle(state, action);\r\n};\r\n","import React, { useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport { FirebaseContext } from './firebaseContext';\r\nimport { firebaseReducer } from './firebaseReducer';\r\nimport {\r\n  ADD_NOTE,\r\n  FETCH_NOTES,\r\n  REMOVE_NOTE,\r\n  SHOW_LOADER,\r\n} from '../types';\r\n\r\nconst url = process.env.REACT_APP_DB_URL;\r\n\r\nexport const FirebaseState = ({ children }) => {\r\n  const initialState = {\r\n    notes: [],\r\n    loading: false,\r\n  };\r\n  const [state, dispatch] = useReducer(\r\n    firebaseReducer,\r\n    initialState\r\n  );\r\n\r\n  const showLoader = () => dispatch({ type: SHOW_LOADER });\r\n\r\n  const fetchNotes = async () => {\r\n    showLoader();\r\n    const res = await axios.get(`${url}/notes.json`);\r\n    const payload = res.data\r\n      ? Object.keys(res.data).map((key) => {\r\n          return {\r\n            ...res.data[key],\r\n            id: key,\r\n          };\r\n        })\r\n      : {};\r\n\r\n    dispatch({ type: FETCH_NOTES, payload });\r\n  };\r\n\r\n  const addNote = async (title) => {\r\n    const note = {\r\n      title,\r\n      date: new Date().toJSON(),\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        `${url}/notes.json`,\r\n        note\r\n      );\r\n      const payload = {\r\n        ...note,\r\n        id: res.data.name,\r\n      };\r\n      dispatch({\r\n        type: ADD_NOTE,\r\n        payload,\r\n      });\r\n    } catch (e) {\r\n      throw new Error(e.message);\r\n    }\r\n  };\r\n\r\n  const removeNote = async (id) => {\r\n    await axios.delete(`${url}/notes/${id}.json`);\r\n    dispatch({ type: REMOVE_NOTE, payload: id });\r\n  };\r\n\r\n  return (\r\n    <FirebaseContext.Provider\r\n      value={{\r\n        showLoader,\r\n        addNote,\r\n        removeNote,\r\n        fetchNotes,\r\n        loading: state.loading,\r\n        notes: state.notes,\r\n      }}\r\n    >\r\n      {children}\r\n    </FirebaseContext.Provider>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\r\nimport {Navbar} from './components/Navbar'\r\nimport {Alert} from './components/Alert'\r\nimport {AlertState} from './context/alert/AlertState'\r\nimport {Home} from './pages/Home'\r\nimport {About} from './pages/About'\r\nimport {FirebaseState} from \"./context/firebase/FirebaseState\";\r\n\r\nfunction App() {\r\n  return (\r\n      <FirebaseState>\r\n        <AlertState>\r\n          <BrowserRouter>\r\n            <Navbar />\r\n            <div className=\"container pt-4\">\r\n              <Alert />\r\n              <Switch>\r\n                <Route path={'/notes/'} exact component={Home} />\r\n                <Route path={'/notes/about'} exact component={About} />\r\n              </Switch>\r\n            </div>\r\n          </BrowserRouter>\r\n        </AlertState>\r\n      </FirebaseState>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}